# -------------------------------------------------------
# Diseño de Lenguajes de Programación
# Parser file generated by the compiler.
# Francisco Rosal - 18676
# -------------------------------------------------------

class Parser():
	def __init__(self, tokens):
		self.tokens = tokens
		self.current_token_index = 0
		self.current_token = self.tokens[self.current_token_index]
		self.EstadoInicial()

	def update_current_token(self):
		if self.current_token_index < len(self.tokens) - 1:
			self.current_token_index += 1
			self.current_token = self.tokens[self.current_token_index]

	def EstadoInicial(self):
		while self.current_token['type'] in ['numero']:
			self.Instruccion()

			if self.current_token["value"] == ";":
				self.update_current_token()

	def Instruccion(self):
		resultado = 0
		resultado = self.Expresion(resultado)
		print("Resultado: ", resultado)

	def Expresion(self, resultado):
		resultado1, resultado2 = 0, 0
		resultado1 = self.Termino(resultado1)
		while self.current_token['value'] in ['&']:

			if self.current_token["value"] == "&":
				self.update_current_token()
				resultado2 = self.Termino(resultado2)
				resultado1 = resultado1 and resultado2

		return resultado1

	def Termino(self, resultado):
		resultado1, resultado2 = 0, 0
		resultado1 = self.Factor(resultado1)
		while self.current_token['value'] in ['|']:

			if self.current_token["value"] == "|":
				self.update_current_token()
				resultado2 = self.Factor(resultado2)
				resultado1 = resultado1 or resultado2

		return resultado1

	def Factor(self, resultado):
		resultado1 = 0
		resultado1 = self.Numero(resultado1)
		return resultado1

	def Numero(self, resultado):
		numero = None
		if self.current_token["type"] == "numero":
			numero = float(self.current_token["value"])
			self.update_current_token()
		return numero

Parser([{'type': 'numero', 'value': '0'}, {'type': 'and', 'value': '&'}, {'type': 'numero', 'value': '0'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '1'}, {'type': 'and', 'value': '&'}, {'type': 'numero', 'value': '0'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '0'}, {'type': 'and', 'value': '&'}, {'type': 'numero', 'value': '1'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '1'}, {'type': 'and', 'value': '&'}, {'type': 'numero', 'value': '1'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '1'}, {'type': 'or', 'value': '|'}, {'type': 'numero', 'value': '1'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '1'}, {'type': 'or', 'value': '|'}, {'type': 'numero', 'value': '0'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '0'}, {'type': 'or', 'value': '|'}, {'type': 'numero', 'value': '1'}, {'type': 'pc', 'value': ';'}, {'type': 'numero', 'value': '0'}, {'type': 'or', 'value': '|'}, {'type': 'numero', 'value': '0'}, {'type': 'pc', 'value': ';'}])
